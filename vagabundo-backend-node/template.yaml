AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  vagabundo-backend

  services for serverless backend for vagabundo

Parameters:
  DBHostURL:
    Type: String
    Default: 'vagabundo-test-database'
  DBUser:
    Type: String
    Default: 'admin'
  DBPassword:
    Type: String
    Default: 'hansdavid'

Globals:
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

    # Always compress API response payloads
    MinimumCompressionSize: 0

    TracingEnabled: true
    
    # Enable xray for our lambdas
    MethodSettings: [{
        LoggingLevel: "INFO",
        MetricsEnabled: True,
        DataTraceEnabled: True,
        ResourcePath: "/*",
        HttpMethod: "*",
    }]

  Function:
    Timeout: 60
    Handler: app.lambdaHandler
    Runtime: nodejs8.10
    Environment:
      Variables:
        DB_HOST: !Ref DBHostURL
        DB_USER: !Ref DBUser
        DB_PASSWORD: !Ref DBPassword
        BRANCH_CO2E_PER_CAPITA_PER_DAY: 7.1781
        MONETARY_CO2E_FACTOR: 0.023

Resources:
  VagabundoApi:
    Type: AWS::Serverless::Api
    Policies:
      - AWSXrayWriteOnlyAccess
    Properties:
      StageName: Prod
      Auth:
        Authorizers:
          ValidJwtTokenAuthorizer:
            FunctionArn: !GetAtt ValidJwtAuthFunction.Arn
          ValidJwtTokenForUserAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt ValidJwtForUserAuthFunction.Arn
            Identity:
              Headers:
                - Authorization

  # Authorizer functions
  ValidJwtAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./authorizers/validJwtToken

  ValidJwtForUserAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./authorizers/validJwtTokenForUser

  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref VagabundoApi

  OptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./authorizers/options
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        Options:
          Type: Api
          Properties:
            RestApiId: !Ref VagabundoApi
            Path: /{cors+}
            Method: OPTIONS

  # Subnets
  VPCSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1a
      CidrBlock: 172.31.64.0/20
      MapPublicIpOnLaunch: true
      VpcId: vpc-0e1a1d65
      Tags:
        - Key: Name
          Value: Lambda Subnet 1
  VPCSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-central-1b
      CidrBlock: 172.31.92.0/20
      MapPublicIpOnLaunch: true
      VpcId: vpc-0e1a1d65
      Tags:
        - Key: Name
          Value: Lambda Subnet 2

  # SecurityGroups
  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: lambda-execution
      GroupDescription: Vagabundo Lambda Execution Group
      Tags:
        - Key: Name
          Value: Lambda Execution
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
        - CidrIpv6: ::/0
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
        - CidrIp: 172.30.0.0/16
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
          Description: All the VPC
        - SourceSecurityGroupId: sg-067a80a15f0e5b320
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
          Description: Vagabundo Database Staging
        - SourceSecurityGroupId: sg-09a32c09b0d979c81
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
          Description: Vagabundo Database Production
      VpcId: vpc-0e1a1d65

  # Traveller
  TravellersGettion:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: travellers/
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SubnetIds: 
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
        SecurityGroupIds:
          - !GetAtt VPCSecurityGroup.GroupId
      Events:
        TravellersGet:
          Type: Api
          Properties:
            RestApiId: !Ref VagabundoApi
            Path: /travellers/{travellerName}
            Method: get
            Auth:
              Authorizer: ValidJwtTokenForUserAuthorizer

  # Stats
  StatsGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: stats/get
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SubnetIds: 
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
        SecurityGroupIds:
          - !GetAtt VPCSecurityGroup.GroupId
      Events:
        StatsGet:
          Type: Api
          Properties:
            RestApiId: !Ref VagabundoApi
            Path: /stats
            Method: get
            Auth:
              Authorizer: ValidJwtTokenAuthorizer
  StatsByTeamGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: stats/get-by-team
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SubnetIds: 
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
        SecurityGroupIds:
          - !GetAtt VPCSecurityGroup.GroupId
      Events:
        StatsByTeamGet:
          Type: Api
          Properties:
            RestApiId: !Ref VagabundoApi
            Path: /stats/teams/{teamName}
            Method: get
            Auth:
              Authorizer: ValidJwtTokenAuthorizer
  StatsByTravellerGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: stats/get-by-traveller
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SubnetIds: 
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
        SecurityGroupIds:
          - !GetAtt VPCSecurityGroup.GroupId
      Events:
        StatsByTravellerGet:
          Type: Api
          Properties:
            RestApiId: !Ref VagabundoApi
            Path: /stats/travellers/{travellerName}
            Method: get
            Auth:
              Authorizer: ValidJwtTokenForUserAuthorizer
  TeamStatsGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: stats/teams
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SubnetIds: 
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
        SecurityGroupIds:
          - !GetAtt VPCSecurityGroup.GroupId
      Events:
        StatsByTeamGet:
          Type: Api
          Properties:
            RestApiId: !Ref VagabundoApi
            Path: /stats/teams
            Method: get
            Auth:
              Authorizer: ValidJwtTokenAuthorizer

  # Trips
  TripsGetByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: trips/get-by-id
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SubnetIds: 
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
        SecurityGroupIds:
          - !GetAtt VPCSecurityGroup.GroupId
      Events:
        TripsGetById:
          Type: Api
          Properties:
            RestApiId: !Ref VagabundoApi
            Path: /trips/{id}
            Method: get
            Auth:
              Authorizer: ValidJwtTokenAuthorizer
  TripsGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: trips/get-trips
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SubnetIds: 
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
        SecurityGroupIds:
          - !GetAtt VPCSecurityGroup.GroupId
      Events:
        TripsGet:
          Type: Api
          Properties:
            RestApiId: !Ref VagabundoApi
            Path: /trips
            Method: get
            Auth:
              Authorizer: ValidJwtTokenAuthorizer
  TripsGetByTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: trips/get-trips-by-team
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SubnetIds: 
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
        SecurityGroupIds:
          - !GetAtt VPCSecurityGroup.GroupId
      Events:
        TripsGet:
          Type: Api
          Properties:
            RestApiId: !Ref VagabundoApi
            Path: /trips/teams/{teamName}
            Method: get
            Auth:
              Authorizer: ValidJwtTokenAuthorizer
  TripsGetByTravellerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: trips/get-trips-by-traveller
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SubnetIds: 
          - !Ref VPCSubnet1
          - !Ref VPCSubnet2
        SecurityGroupIds:
          - !GetAtt VPCSecurityGroup.GroupId
      Events:
        TripsGet:
          Type: Api
          Properties:
            RestApiId: !Ref VagabundoApi
            Path: /trips/travellers/{travellerName}
            Method: get
            Auth:
              Authorizer: ValidJwtTokenForUserAuthorizer

Outputs:
  ApiURL:
    Description: "API URL"
    Value: !Sub 'https://${VagabundoApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
